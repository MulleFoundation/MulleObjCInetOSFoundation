cmake_minimum_required (VERSION 3.0)

# probably better to remove it, and specify as
# cmake -DCMAKE_OSX_SYSROOT=macosx ..
#
set( CMAKE_OSX_SYSROOT macosx)

project (MulleObjCPosixFoundation)


set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/mulle-configuration)
set( MULLE_LANGUAGE "ObjC")

if( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  include( Debug)
else()
  include( Release)
endif()

#
# -D_XOPEN_SOURCE is only needed only in CMakeLists.txt
# ObjC code is "shielded" from <unistd.h>
#
set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_XOPEN_SOURCE=700")
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_XOPEN_SOURCE=700")


include_directories(
   src
   src/Base
   src/Base/Categories
   src/Base/Functions
   src/Posix
   src/Posix/Functions
   src/Posix/Timezone
)


## MEMO: recreate this with mulle-xcode-to-cmake 0.5.2 or better
##
## See header of CMakeSourcesAndHeaders.txt how to recreate
##
#### CMakeSourcesAndHeaders.txt GENERATED FROM XCODE PROJECT

include( CMakeSourcesAndHeaders.txt)


set( DARWIN_HEADERS
${MULLE_OBJC_OSBASE_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_POSIX_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_BSD_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_DARWIN_FOUNDATION_PUBLIC_HEADERS}
)

set( DARWIN_SOURCES
${MULLE_OBJC_OSBASE_FOUNDATION_SOURCES}
${MULLE_OBJC_POSIX_FOUNDATION_SOURCES}
${MULLE_OBJC_BSD_FOUNDATION_SOURCES}
${MULLE_OBJC_DARWIN_FOUNDATION_SOURCES}
)

set( FREE_BSD_HEADERS
${MULLE_OBJC_OSBASE_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_POSIX_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_BSD_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_FREE_BSD_FOUNDATION_PUBLIC_HEADERS}
)

set( FREE_BSD_SOURCES
${MULLE_OBJC_OSBASE_FOUNDATION_SOURCES}
${MULLE_OBJC_POSIX_FOUNDATION_SOURCES}
${MULLE_OBJC_BSD_FOUNDATION_SOURCES}
${MULLE_OBJC_FREE_BSD_FOUNDATION_SOURCES}
)


set( LINUX_HEADERS
${MULLE_OBJC_OSBASE_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_POSIX_FOUNDATION_PUBLIC_HEADERS}
${MULLE_OBJC_LINUX_FOUNDATION_PUBLIC_HEADERS}
)

set( LINUX_SOURCES
${MULLE_OBJC_OSBASE_FOUNDATION_SOURCES}
${MULLE_OBJC_POSIX_FOUNDATION_SOURCES}
${MULLE_OBJC_LINUX_FOUNDATION_SOURCES}
)


if( CMAKE_SYSTEM_NAME STREQUAL "Darwin")
set( HEADERS ${DARWIN_HEADERS})
set( SOURCES ${DARWIN_SOURCES})
include_directories(
    src/BSD
    src/Darwin
)
endif()


if( CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
set( HEADERS ${FREE_BSD_HEADERS})
set( SOURCES ${FREE_BSD_SOURCES})
include_directories(
    src/BSD
    src/FreeBSD
)
endif()


if( CMAKE_SYSTEM_NAME STREQUAL "Linux")
set( HEADERS ${LINUX_HEADERS})
set( SOURCES ${LINUX_SOURCES})
include_directories(
    src/Linux
)
endif()


add_library( MulleObjCOSFoundation STATIC
${MULLE_OBJC_OS_FOUNDATION_SOURCES}
${SOURCES}
${HEADERS}
)

find_library( MULLE_ABA_LIBRARY             NAMES mulle_aba)
find_library( MULLE_ALLOCATOR_LIBRARY       NAMES mulle_allocator)
find_library( MULLE_BUFFER_LIBRARY          NAMES mulle_buffer)
find_library( MULLE_CONCURRENT_LIBRARY      NAMES mulle_concurrent)
find_library( MULLE_CONTAINER_LIBRARY       NAMES mulle_container)
find_library( MULLE_OBJC_FOUNDATION_LIBRARY NAMES MulleObjCFoundation)
find_library( MULLE_OBJC_INET_FOUNDATION_LIBRARY NAMES MulleObjCInetFoundation)
find_library( MULLE_OBJC_LIBRARY            NAMES MulleObjC)
find_library( MULLE_OBJC_RUNTIME_LIBRARY    NAMES mulle_objc)
find_library( MULLE_SPRINTF_LIBRARY         NAMES mulle_sprintf)
find_library( MULLE_TEST_ALLOCATOR_LIBRARY  NAMES mulle_test_allocator)
find_library( MULLE_THREAD_LIBRARY          NAMES mulle_thread)
find_library( MULLE_UTF_LIBRARY             NAMES mulle_utf)


message(STATUS "MULLE_ABA_LIBRARY is ${MULLE_ABA_LIBRARY}")
message(STATUS "MULLE_ALLOCATOR_LIBRARY is ${MULLE_ALLOCATOR_LIBRARY}")
message(STATUS "MULLE_BUFFER_LIBRARY is ${MULLE_BUFFER_LIBRARY}")
message(STATUS "MULLE_CONCURRENT_LIBRARY is ${MULLE_CONCURRENT_LIBRARY}")
message(STATUS "MULLE_CONTAINER_LIBRARY is ${MULLE_CONTAINER_LIBRARY}")
message(STATUS "MULLE_OBJC_FOUNDATION_LIBRARY is ${MULLE_OBJC_FOUNDATION_LIBRARY}")
message(STATUS "MULLE_OBJC_INET_FOUNDATION_LIBRARY is ${MULLE_OBJC_INET_FOUNDATION_LIBRARY}")
message(STATUS "MULLE_OBJC_LIBRARY is ${MULLE_OBJC_LIBRARY}")
message(STATUS "MULLE_OBJC_RUNTIME_LIBRARY is ${MULLE_OBJC_RUNTIME_LIBRARY}")
message(STATUS "MULLE_SPRINTF_LIBRARY is ${MULLE_SPRINTF_LIBRARY}")
message(STATUS "MULLE_TEST_ALLOCATOR_LIBRARY is ${MULLE_TEST_ALLOCATOR_LIBRARY}")
message(STATUS "MULLE_THREAD_LIBRARY is ${MULLE_THREAD_LIBRARY}")
message(STATUS "MULLE_UTF_LIBRARY is ${MULLE_UTF_LIBRARY}")


set( DEPENDENCY_LIBRARIES
${MULLE_ABA_LIBRARY}
${MULLE_ALLOCATOR_LIBRARY}
${MULLE_BUFFER_LIBRARY}
${MULLE_CONCURRENT_LIBRARY}
${MULLE_CONTAINER_LIBRARY}
${MULLE_OBJC_FOUNDATION_LIBRARY}
${MULLE_OBJC_INET_FOUNDATION_LIBRARY}
${MULLE_OBJC_LIBRARY}
${MULLE_OBJC_RUNTIME_LIBRARY}
${MULLE_SPRINTF_LIBRARY}
${MULLE_TEST_ALLOCATOR_LIBRARY}
${MULLE_THREAD_LIBRARY}
${MULLE_UTF_LIBRARY}
)


INSTALL( TARGETS MulleObjCOSFoundation DESTINATION "lib")

INSTALL( FILES ${MULLE_OBJC_OS_FOUNDATION_PUBLIC_HEADERS} DESTINATION "include/MulleObjCOSFoundation")
INSTALL( FILES ${HEADERS} DESTINATION "include/MulleObjCOSFoundation")

add_library( MulleObjCOSFoundationStandalone SHARED
${MULLE_OBJC_OS_FOUNDATION_STANDALONE_SOURCES}
)

add_dependencies( MulleObjCOSFoundationStandalone MulleObjCOSFoundation)

TARGET_LINK_LIBRARIES( MulleObjCOSFoundationStandalone
${BEGIN_ALL_LOAD}
MulleObjCOSFoundation
${DEPENDENCY_LIBRARIES}
${END_ALL_LOAD}
)

INSTALL( TARGETS MulleObjCOSFoundationStandalone DESTINATION "lib")
